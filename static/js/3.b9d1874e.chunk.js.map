{"version":3,"sources":["components/AddTask/AddTask.js"],"names":["AddTask","props","inputRef","useRef","setTodoList","useSetRecoilState","listStateMain","useState","input","setInput","redirect","setRedirect","loading","setloading","useEffect","current","focus","createToDo","axios","post","then","res","oldTodoList","id","data","title","completed","user_id","to","catch","err","console","log","sx","height","flexDirection","bg","padding","textAlign","borderBottom","color","flexGrow","justifyContent","alignItems","Fragment","ref","width","value","onChange","event","target","onKeyDown","keyCode","variant","onClick","exact","style"],"mappings":"sNAkGeA,UArFC,SAAAC,GAEd,IAAMC,EAAWC,iBAAO,MAElBC,EAAcC,YAAkBC,KAEtC,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,MAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRZ,EAASa,QAAQC,UACjB,IAEF,IASMC,EAAa,WACH,KAAVT,IACFK,GAAW,GACXK,IAAMC,KAAK,oBAAqB,CAAC,UAAY,QAAS,MAAQX,EAAO,QAAU,SAC9EY,MAAK,SAAAC,GACJZ,EAAS,IAETL,GAAY,SAACkB,GAAD,4BACPA,GADO,CAEV,CACEC,GAAIF,EAAIG,KAAKA,KAAKD,GAClBE,MAAOJ,EAAIG,KAAKA,KAAKC,MACrBC,UAAWL,EAAIG,KAAKA,KAAKE,UACzBC,QAASN,EAAIG,KAAKA,KAAKG,cAI3Bd,GAAW,GACXF,EAAY,cAAC,IAAD,CAAUiB,GAAG,UAE1BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAS9B,OAFAC,QAAQC,IAAIpB,GAGT,eAAC,IAAD,CAAMqB,GAAI,CAACC,OAAQ,QAASC,cAAe,UAAcC,GAAG,QAA5D,UACI1B,EAED,cAAC,IAAD,CAAKuB,GAAI,CAACC,OAAQ,OAAQG,QAAS,MAAOC,UAAW,SAAUC,aAAc,oBAAqBH,GAAI,cAAeI,MAAM,aAA3H,SAAyI,cAAC,IAAD,kCAEzI,cAAC,IAAD,CAAMP,GAAI,CACFQ,SAAU,EACVN,cAAe,SACfO,eAAgB,SAChBC,WAAY,UAJpB,SAMG/B,EACC,eAAC,IAAMgC,SAAP,WACE,cAAC,IAAD,IAAW,cAAC,IAAD,CAAMX,GAAI,CAACO,MAAM,aAAjB,+BAGb,eAAC,IAAMI,SAAP,WACE,cAAC,IAAD,CAAOC,IAAK3C,EAAU+B,GAAI,CAACa,MAAM,OAASC,MAAOvC,EAAOwC,SAAU,SAACC,GAAD,OAAWxC,EAASwC,EAAMC,OAAOH,QAAQI,UAxDvG,SAACF,GAEO,KAAlBA,EAAMG,SACRnC,OAsDQ,cAAC,IAAD,CAAQoC,QAAQ,MAAMC,QAASrC,EAA/B,gCAGN,cAAC,IAAD,UACE,cAAC,IAAD,CAASW,GAAG,IACV2B,MAAOtD,EAAMsD,MACbC,MAAO,CAACV,MAAO,SAFjB,SAGC,cAAC,IAAD","file":"static/js/3.b9d1874e.chunk.js","sourcesContent":["import React, { useState,useRef, useEffect} from 'react'\nimport {useSetRecoilState} from 'recoil';\n\nimport axios from '../../axios';\n\nimport {Flex, Box,  Text,  Input, Button, Spinner, Heading } from 'theme-ui'\n\nimport {Redirect} from 'react-router-dom';\n\nimport {NavLink} from 'react-router-dom';\n\nimport {listStateMain} from '../../recoliState';\n\nconst AddTask = props => {\n\n  const inputRef = useRef(null);\n\n  const setTodoList = useSetRecoilState(listStateMain);\n\n  const [input, setInput] = useState('');\n  const [redirect, setRedirect] = useState(null);\n  const [loading, setloading] = useState(false);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  },[]);\n\n  const onEnter = (event) => {\n  \n    if (event.keyCode === 13) {\n      createToDo();\n    }\n  } \n\n  \n\n  const createToDo = () => {\n    if (input !== '') {\n      setloading(true);\n      axios.post('/users/1292/todos', {\"completed\":\"false\", \"title\":input, \"user_id\":\"1292\" })\n      .then(res => {\n        setInput('');\n        \n        setTodoList((oldTodoList) => [\n          ...oldTodoList,\n          {\n            id: res.data.data.id,\n            title: res.data.data.title,\n            completed: res.data.data.completed,\n            user_id: res.data.data.user_id,\n          },\n        ]);\n\n        setloading(false);\n        setRedirect(<Redirect to='/' />);\n      })\n      .catch(err => console.log(err));\n\n    }\n  }\n\n\n\n  console.log(loading)\n\n  return(\n    \t<Flex sx={{height: '100vh', flexDirection: 'column',  }} bg=\"muted\">\n        {redirect}\n        \n        <Box sx={{height: '77px', padding: '5px', textAlign: 'center', borderBottom: '1px solid #442929', bg: 'nextPrimary', color:'secondary'}}><Heading>Dodawanie zadania</Heading></Box>\n        \n        <Flex sx={{\n                flexGrow: 1,\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}>\n          {loading ? \n            <React.Fragment>  \n              <Spinner /><Text sx={{color:'secondary'}}>Dodaje Zadanie</Text> \n            </React.Fragment>  \n            :\n            <React.Fragment>  \n              <Input ref={inputRef} sx={{width:'80%',}} value={input} onChange={(event) => setInput(event.target.value)} onKeyDown={onEnter}/>\n              <Button variant='add' onClick={createToDo}>Dodaj zadanie</Button>\n            </React.Fragment>}\n        </Flex>\n        <Flex>\n          <NavLink to='/' \n            exact={props.exact}\n            style={{width: '100vw' }}\n          ><Button>Lista Zada≈Ñ</Button></NavLink>\n        </Flex>\n      </Flex>\n  );\n\n}\n\nexport default AddTask;"],"sourceRoot":""}