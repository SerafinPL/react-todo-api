{"version":3,"sources":["components/FullTask/FullTask.js"],"names":["textState","atom","key","default","charCountState","selector","get","length","FullTask","task","textareaRef","useRef","useRecoilState","listStateMain","todoList","setTodoList","index","findIndex","listItem","input","setInput","useState","completed","check","setCheck","redirect","setRedirect","useEffect","title","current","focus","saveChange","newList","replaceItemAtIndex","status","axios","put","id","user_id","user","then","res","console","log","catch","err","to","arr","newValue","slice","count","useRecoilValue","sx","height","flexDirection","maxHeight","bg","padding","textAlign","borderBottom","color","flexGrow","display","alignItems","justifyContent","checked","onChange","event","target","ref","value","onKeyDown","keyCode","alignSelf","variant","onClick","removeItemAtIndex","delete"],"mappings":"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","file":"static/js/4.c6e9cbe3.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport {atom, selector, useRecoilState, useRecoilValue} from 'recoil';\n\nimport {Flex, Box, Checkbox, Paragraph,Label,Button,Textarea,Heading  } from 'theme-ui'\n\nimport axios from '../../axios';\n \nimport {NavLink, Redirect} from 'react-router-dom';\n\nimport {listStateMain} from '../../recoliState';\n\n\nconst textState = atom({\n  key: 'textState', \n  default: '', \n});\n\nconst charCountState = selector({\n  key: 'charCountState', \n  get: ({get}) => {\n    const text = get(textState);\n\n    return text.length;\n  },\n});\n\n\nconst FullTask = ({task}) => {\n\n  const textareaRef = useRef(null);\n\n  const [todoList, setTodoList] = useRecoilState(listStateMain);\n  const index = todoList.findIndex((listItem) => listItem === task);\n\n  const [input, setInput] = useRecoilState(textState);\n  const [check, setCheck] = useState(task.completed);\n  const [redirect, setRedirect] = useState(null);\n\n  useEffect(() => {\n    setInput(task.title);\n  },[setInput, task.title])\n\n   useEffect(() => {\n    textareaRef.current.focus();\n  },[]);\n  \n  const onEnter = (event) => {\n  \n    if (event.keyCode === 13) {\n      saveChange();\n    }\n  } \n\n  const saveChange = () => {\n\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...task,\n      title: input,\n      completed: check,\n      status: check ? 'completed' : 'pending'\n    });\n\n    setTodoList(newList);\n\n    axios.put('/todos/'+task.id , {status: check ? 'completed' : 'pending', title:input, user_id:\"1000\", user: 'KubaKoder', })\n    .then(res => {\n      console.log(res);\n          \n    })\n    .catch(err => console.log(err));\n\n    setRedirect(<Redirect to='/' />);\n  }\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index);\n\n    setTodoList(newList);\n\n    axios.delete('/todos/'+task.id )\n    .then(res => {\n      console.log(res);\n          \n    })\n    .catch(err => console.log(err));\n  };\n\n  const replaceItemAtIndex = (arr, index, newValue) => {\n    return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n  }\n\n  function removeItemAtIndex(arr, index) {\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\n  }\n\n  const count = useRecoilValue(charCountState);\n\n  return(\n    \t<Flex sx={{height: '100vh', flexDirection: 'column', maxHeight: '-webkit-fill-available'}} bg=\"muted\">\n        {redirect}\n        <Box sx={{height: '77px', padding: '5px', textAlign: 'center', borderBottom: '1px solid #442929', bg: 'nextPrimary', color:'secondary'}}><Heading>Edycja zadania</Heading></Box>\n        <Box sx={{\n                flexGrow: 1,\n                display: 'flex',\n                alignItems: 'center',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                padding: '20px'\n              }}>\n          <Label sx = {{\n              \n              alignItems: 'center',\n            }}\n          >\n            <Checkbox checked={check} onChange={event => setCheck(event.target.checked)}/>\n              <Textarea ref={textareaRef} sx={{\n                flexGrow: 1,\n              }} value={input} onChange={event => setInput(event.target.value)}\n              onKeyDown={onEnter}\n              />\n            \n            \n          </Label>\n          <Paragraph sx={{ alignSelf: 'end', color:'secondary'}}>Ilość znaków: {count}</Paragraph>\n        </Box>\n        \n        <Box>\n          <Button variant='triple' onClick={saveChange}>Zapisz Zmiany</Button>\n          <Button variant='triple' onClick={deleteItem}>Usuń Zadanie</Button>\n          <NavLink to='/' ><Button variant='triple'>Wróć</Button></NavLink>\n        </Box>\n      </Flex>\n  );\n\n}\n\nexport default FullTask;"],"sourceRoot":""}